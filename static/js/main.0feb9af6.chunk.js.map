{"version":3,"sources":["Header.js","Search.js","BookCard.js","BookList.js","Books.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","Search","props","onSubmit","searchBook","action","onChange","handleSearch","type","placeholder","BookCard","src","image","alt","title","author","pages","BookList","books","map","book","i","src_BookCard","key","volumeInfo","imageLinks","thumbnail","authors","pageCount","Books","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","e","preventDefault","request","get","query","q","state","searchInput","then","data","setState","toConsumableArray","body","items","target","value","src_Search","src_BookList","Component","App","src_Header","src_Books","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6PAUeA,EARA,WACb,OACEC,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,sBACbH,EAAAC,EAAAC,cAAA,mCCmBSE,EAvBA,SAAAC,GACb,OACEL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,QAAMI,SAAUD,EAAME,WAAYC,OAAO,OACvCR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SACEO,SAAUJ,EAAMK,aAChBC,KAAK,OACLC,YAAY,wBAGhBZ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQS,KAAK,SAASR,UAAU,cAC9BH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,6CCCZU,EAfE,SAAAR,GACf,OAEIL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKY,IAAKT,EAAMU,MAAOC,IAAI,KAC3BhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,UAAKG,EAAMY,OACXjB,EAAAC,EAAAC,cAAA,UAAKG,EAAMa,QACXlB,EAAAC,EAAAC,cAAA,SAAIG,EAAMc,MAAV,aCWKC,EAlBE,SAAAf,GACf,OACEL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACZE,EAAMgB,MAAMC,IAAI,SAACC,EAAMC,GACtB,OACExB,EAAAC,EAAAC,cAACuB,EAAD,CACEC,IAAKF,EACLT,MAAOQ,EAAKI,WAAWC,WAAWC,UAClCZ,MAAOM,EAAKI,WAAWV,MACvBC,OAAQK,EAAKI,WAAWG,QACxBX,MAAOI,EAAKI,WAAWI,gBC2BpBC,cAhCX,SAAAA,EAAY3B,GAAM,IAAA4B,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACdC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAM/B,KAOVE,WAAa,SAACiC,GACVA,EAAEC,iBACFC,IACKC,IAAI,+CACJC,MAAM,CAACC,EAAGZ,EAAKa,MAAMC,cACrBC,KAAK,SAACC,GACHhB,EAAKiB,SAAS,CAAE7B,MAAMa,OAAAiB,EAAA,EAAAjB,CAAKe,EAAKG,KAAKC,YAd/BpB,EAkBlBvB,aAAe,SAAC8B,GACZP,EAAKiB,SAAS,CAAEH,YAAaP,EAAEc,OAAOC,SAjBtCtB,EAAKa,MAAQ,CACTzB,MAAO,GACP0B,YAAa,IAJHd,wEAuBd,OACIjC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACsD,EAAD,CAAQjD,WAAY6B,KAAK7B,WAAYG,aAAc0B,KAAK1B,eACxDV,EAAAC,EAAAC,cAACuD,EAAD,CAAUpC,MAAOe,KAAKU,MAAMzB,gBA5BxBqC,aCULC,0LATX,OACE3D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC0D,EAAD,MACA5D,EAAAC,EAAAC,cAAC2D,EAAD,cALUH,cCOEI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpE,EAAAC,EAAAC,cAACmE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,KAAK,SAAA2B,GACjCA,EAAaC","file":"static/js/main.0feb9af6.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    <header>\r\n      <i className=\"fas fa-book fa-4x\" />\r\n      <h1>Book Finder</h1>\r\n    </header>\r\n  );\r\n};\r\nexport default Header;","import React from \"react\";\r\n\r\nconst Search = props => {\r\n  return (\r\n    <div className=\"search-area\">\r\n      <form onSubmit={props.searchBook} action=\"get\">\r\n        <div className=\"inner-form\">\r\n          <div>\r\n            <input\r\n              onChange={props.handleSearch}\r\n              type=\"text\"\r\n              placeholder=\"Enter Book Name...\"\r\n            />\r\n          </div>\r\n          <div>\r\n            <button type=\"submit\" className=\"search-btn\">\r\n              <i className=\"fa fa-search fa-2x\" />\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","import React from \"react\";\r\n\r\nconst BookCard = props => {\r\n  return (\r\n    \r\n      <div className=\"card\">\r\n        <img src={props.image} alt=\"\" />\r\n        <div className=\"info\">\r\n          <h2>{props.title}</h2>\r\n          <h3>{props.author}</h3>\r\n          <p>{props.pages} Pages</p>\r\n        </div>\r\n      </div>\r\n    \r\n  );\r\n};\r\n\r\nexport default BookCard;\r\n","import React from \"react\";\r\nimport BookCard from \"./BookCard\";\r\n\r\nconst BookList = props => {\r\n  return (\r\n    <div className=\"list\">\r\n      {props.books.map((book, i) => {\r\n        return (\r\n          <BookCard\r\n            key={i}\r\n            image={book.volumeInfo.imageLinks.thumbnail}\r\n            title={book.volumeInfo.title}\r\n            author={book.volumeInfo.authors}\r\n            pages={book.volumeInfo.pageCount}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BookList;\r\n","import React, { Component } from \"react\";\r\nimport Search from \"./Search\";\r\nimport request from \"superagent\";\r\nimport BookList from \"./BookList\";\r\n\r\n\r\nclass Books extends Component{\r\n    \r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            books: [],\r\n            searchInput: ''\r\n        }\r\n    }\r\n\r\n    searchBook = (e) => {\r\n        e.preventDefault();\r\n        request\r\n            .get(\"https://www.googleapis.com/books/v1/volumes\")\r\n            .query({q: this.state.searchInput})\r\n            .then((data) => {\r\n                this.setState({ books: [...data.body.items] })\r\n            });\r\n    }\r\n\r\n    handleSearch = (e) => {\r\n        this.setState({ searchInput: e.target.value });\r\n    }\r\n    \r\n    render(){\r\n        return(\r\n            <div>\r\n                <Search searchBook={this.searchBook} handleSearch={this.handleSearch} />\r\n                <BookList books={this.state.books}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Books;","import React, { Component } from 'react';\r\nimport Header from \"./Header\";\r\nimport Books from \"./Books\";\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Header />\r\n        <Books />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}